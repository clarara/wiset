import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeoutException;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import com.rabbitmq.client.Delivery;
import org.python.util.PythonInterpreter;
public class NewServer2 {

   private AmazonS3 s3;
   private String accessKey = "";
   private String secretKey = ""; // aws 접근을 위한 키
   private Map<String, Integer> Queue = new HashMap<>(); // Queue의 이름과 s3빈도수 측정을 위한 int값이 들어가는 map
   private static PythonInterpreter interpreter;
   void builds3() {
      s3 = AmazonS3ClientBuilder.standard()
            .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey)))
            .withRegion(Regions.AP_NORTHEAST_2).build(); // s3 객체 생성
   }

   void createchannel_consume(Connection connection) {
      try {

         for (String Queuename : Queue.keySet()) { // Queue에 들어있는 키 값을 이용해 채널과 큐를 생성하고 정보와 함수를 선언한다.
            Channel channel = connection.createChannel(); // 채널 생성
            channel.queueDeclare(Queuename, false, false, false, null); // 채널별 큐 생성
            DeliverCallback deliverCallback = (consumerTag, delivery) -> {
               
               recv_save_data(delivery, Queuename); // 큐에 데이터가 왔을때 호출되는 함수이다.
               
            };
            channel.basicConsume(Queuename, true, deliverCallback, consumerTag -> {
            });// 채널의 어떤 큐에 데이터가 들어오면 어떤 함수가 호출되는지 등에 대한 정보선언.
         }
         System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   void uploads3(File file, String Queuename, String location) {
      PutObjectRequest putObjectRequest = new PutObjectRequest("savvytest/" + location + "/" + Queuename, file.getName(), file);
      s3.putObject(putObjectRequest);
      System.out.println(file.getName() + " s3 upload");
   }// s3업로드

   void recv_save_data(Delivery delivery, String Queuename) {

      try {
         ByteArrayInputStream bais = new ByteArrayInputStream(delivery.getBody());// 데이터 받아옴
         ObjectInputStream ois = new ObjectInputStream(bais); // 역직렬화
         Object objectMember;
         objectMember = ois.readObject();

         double[][] data = (double[][]) objectMember;
         
           interpreter.execfile("test.py");
           interpreter.exec("print(sum(7,8))");
           
         Calendar cal = Calendar.getInstance();
         int month = cal.get(Calendar.MONTH) + 1;
         File file = new File(cal.get(Calendar.YEAR) + "-" + month + " " + cal.get(Calendar.DATE) + "_"
               + cal.get(Calendar.HOUR_OF_DAY) + "_" + cal.get(Calendar.MINUTE) + "_" + cal.get(Calendar.SECOND)
               + ".csv"); // 파일이름을 날짜랑
         FileWriter writer = new FileWriter(file, true);

         for (int i = 0; i < 60; i++) {
            for (int j = 0; j < 80; j++) {
               writer.write(String.valueOf(data[i][j]) + ",");
            }
            writer.write("\n");
         } // 읽어온 데이터 파일에 추가 기록.
//         long start = System.currentTimeMillis();
//               System.out.println(start);
         writer.close();
         
         String location = "ewhawomansuniv"; // 실제는 data 객체안에서 가져와야함. 업체랑 의논후 정함.
         Queue.put(Queuename, 1 + Queue.get(Queuename));
         if (Queue.get(Queuename) % 100 == 0) {
            uploads3(file, Queuename, location);
            Queue.put(Queuename, 0);
         } // 각 클라이언트별로 프레임 100번에 한번 s3에 저장되게 구성.

      } catch (ClassNotFoundException e) {
         e.printStackTrace();
      } catch (UnsupportedEncodingException e) {
         e.printStackTrace();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   void run(int clientcount) {
      for (int i = 1; i <= clientcount; i++) {
         Queue.put(String.valueOf(i), 0);
      } // 클라이언트의 개수만큼 값을 넣어준다.
      interpreter = new PythonInterpreter();
      builds3();
      ConnectionFactory factory = new ConnectionFactory();
      factory.setHost("localhost");
      factory.setUsername("uni");
      factory.setPassword("uni"); // rabbitmq 생성한 계정입력, 외부에서 접근 가능.
      Connection connection;
      try {
         connection = factory.newConnection();
         createchannel_consume(connection);
      } catch (IOException e) {
         e.printStackTrace();
      } catch (TimeoutException e) {
         e.printStackTrace();
      }
   }

   public static void main(String[] args) {
      NewServer2 s = new NewServer2();
      s.run(4);//클라이언트 4개
   }

}
